(defun isPrime (n i)
    (if (> i (sqrt n))
        (return-from isPrime 1)
        (progn
            (if (= (rem n i) 0)
                (return-from isPrime 0)
                (isPrime n (+ i 1))
            )
        )
    )
)

(defun numDigits (n)
    (if (= n 0)
        (return-from numDigits 0)
        (return-from numDigits (+ 1 (numDigits (floor (/ n 10)))))
    )
)

(defun rotate (n)
    (progn
        (defparameter leastSigDig (rem n 10))
        (defparameter powFactor (- (numDigits n) 1))
        (defparameter multThis (EXPT 10 powFactor))
        ;(print leastSigDig)
        ;(print powFactor)
        ;(print multThis)
        (return-from rotate (+ (floor (/ n 10)) (* leastSigDig multThis)))
    )
)

(defun allRotsPrime (n i)
    (if (= i 0)
        (return-from allRotsPrime 1)
        (progn
            ;(print 12345)
            ;(defvar newi (- i 1))
            ;(print newi)
            ;(defvar newn (rotate n))
            ;(print newn)
            (defparameter nPrime (isPrime n 2))
            (if (= nPrime 0)
                (return-from allRotsPrime 0)
                (progn 
                    (defparameter rotsPrime (allRotsPrime (rotate n) (- i 1)))
                    ;(defvar final (and rotsPrime nPrime))
                    ;(return-from allRotsPrime final)
                    (return-from allRotsPrime rotsPrime)
                )
            )
            ;(print nPrime)
        )
    )
)

(defun countSpecialPrimes (n)
    (if (<= n 1)
        (return-from countSpecialPrimes 0)
        (progn
            ;(defvar nPrime (allRotsPrime n (numDigits n)))
            ;(print n)
            ;(print (numDigits n))
            (defparameter newn n)
            (defparameter ndigs (numDigits n))
            ;(print newn)
            ;(print ndigs)
            ;(format t " --- ~a" newn)
            ;(format t " --- ~a" ndigs)
            ;(defparameter printthis (allRotsPrime newn ndigs))
            ;(format t " --- ~a" printthis)

            ;(print (allRotsPrime newn ndigs))
            ;(print (allRotsPrime 5 (numDigits 5)))
            ;(print (allRotsPrime n (numDigits n)))
            ;(print (allRotsPrime 5 (numDigits 5)))
            ;(print nPrime)
            (if (= (allRotsPrime newn ndigs) 1)
                (progn
                    ;(print "n prime")
                    (return-from countSpecialPrimes (+ 1 (countSpecialPrimes (- n 1))))
                )
                (progn
                    ;(print "n not prime")
                    (return-from countSpecialPrimes (countSpecialPrimes (- n 1)))
                )
            )
        )
    )
)

;(defvar y 71)
;(defvar z 2)
;(if (= (isPrime y z) 1)
;    (print 111)
;    (print 222)
;    )
    
;(print (numDigits 197))
;(print (rotate 197))
;(print (and 1 0))
;(print (and 0 1))
;(print (allRotsPrime 197 3))
;(print 999)

;(print (isPrime 4 2))

(print (countSpecialPrimes 100))
;(print (allRotsPrime 71 2))
;(print (allRotsPrime 197 (numDigits 197)))
;(print (allRotsPrime 6 (numDigits 6)))

;(if (= (allRotsPrime 5 (numDigits 5)) 1)
 ;   (print "Prime")
  ;  (print "Not prime")
;)